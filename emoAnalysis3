#-*-coding:utf-8 -*-
'''
Created on 18-8-4
@author: minghui_J
lat、lon、time、emo的聚类
方法是用emo_score_average
可视化k个簇每个簇里面lat、lon、emo的分布
'''
import pymysql
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
def query_all(cur, query):
    cur.execute(query)
    return cur.fetchall()

def getData(data_lat,data_lon,data_time,data_emo,data_type):
    conn = pymysql.connect(host='localhost', port=3306, user='root', passwd='JMHjmh1998', db='weibodata', charset='utf8')
    cur=conn.cursor()
    query = 'select lat,lon,score,time,emotion_label,tag_ids from d_new_textEmotion where emotion_label!="None"'
    arr = query_all(cur,query)
    cur.close()
    conn.close()
    positive=0
    neutal=0
    negative=0
    for key in arr:
        time=(float(str(key[3]).split(':')[0])) + (float(str(key[3]).split(':')[1]) / 60) + (
                float(str(key[3]).split(':')[2]) / 3600)
        if key[4]=='0':
            if negative==1000:
                continue
            data_lat.append(float(key[0]))
            data_lon.append(float(key[1]))
            data_time.append(time)
            data_emo.append(1-float(key[2]))
            data_type.append(str(key[5]))
            negative+=1
        if key[4]=='1':
            if neutal==1000:
                continue
            data_lat.append(float(key[0]))
            data_lon.append(float(key[1]))
            data_time.append(time)
            data_emo.append(float(0.5))
            data_type.append(str(key[5]))
            neutal+=1
        if key[4]=='2':
            if positive==1000:
                continue
            data_lat.append(float(key[0]))
            data_lon.append(float(key[1]))
            data_time.append(time)
            data_emo.append(float(key[2]))
            data_type.append(str(key[5]))
            positive+=1
    return (data_lat,data_lon,data_time,data_emo,data_type)

def normalization(lat,lon,time):
    normal_lat=[]
    normal_lon=[]
    normal_time=[]
    for i in range(len(lat)):
        max_lat=max(lat)
        min_lat=min(lat)
        normal_lat.append((float(lat[i]-min_lat))/(float(max_lat-min_lat)))
        max_lon=max(lon)
        min_lon=min(lon)
        normal_lon.append((float(lon[i]-min_lon))/(float(max_lon-min_lon)))
        max_time=max(time)
        min_time=min(time)
        normal_time.append((float(time[i]-min_time))/(float(max_time-min_time)))
    return normal_lat,normal_lon,normal_time

def useKmeans(lat,lon,time,emo,k):
    data=np.array(list(zip(lat,lon,time,emo))).reshape(len(lat),4)
    estimator = KMeans(n_clusters=k)
    kmeans=estimator.fit(data)
    labels = kmeans.labels_
    center = kmeans.cluster_centers_
    print "center:"
    print center
    return labels

def groupList(labels,lat,lon,time,emo,category,k):
    lat_result = []
    lon_result = []
    time_result = []
    emo_score= []
    category_result=[]
    for i in range(k):
        lat_result.append([])
        lon_result.append([])
        time_result.append([])
        emo_score.append([])
        category_result.append([])
    for i,l in enumerate(labels):
        lat_result[l].append(lat[i])
        lon_result[l].append(lon[i])
        time_result[l].append(time[i])
        emo_score[l].append(emo[i])
        category_result[l].append(category[i])
    return lat_result,lon_result,time_result,emo_score,category_result

def drawPic(lat_result,lon_result,time_result,colors,markers,labels,k):
    ax = plt.subplot(111, projection='3d')
    for i in range(k):
        plot1 = ax.scatter(np.array(lat_result[i]), np.array(lon_result[i]), np.array(time_result[i]), color=colors[i],
                       marker=markers[i], alpha=0.5,label=labels[i])
    # plot2 = ax.scatter(np.array(lat_result[1]), np.array(lon_result[1]), np.array(time_result[1]), color='b',
    #                    marker='o', alpha=0.5)
    # plot3 = ax.scatter(np.array(lat_result[2]), np.array(lon_result[2]), np.array(time_result[2]), color='g',
    #                    marker='*', alpha=0.5)
    # plt.legend(plot1, plot2, plot3,labels=['A', 'B', 'C'])
    plt.legend()
    ax.set_zlabel('time')
    ax.set_ylabel('lon')
    ax.set_xlabel('lat')
    plt.show()

def drawPic1(lat_result,lon_result,time_result,emo_score,category,colors,markers,labels):
    ax = plt.subplot(111, projection='3d')
    for i in range(len(lat_result)):
        if category[i]=='1':
            plot0=ax.scatter(lat_result[i],lon_result[i],emo_score[i],color=colors[0],marker=markers[0],label=labels[0])
        if category[i] == '2':
            plot1=ax.scatter(lat_result[i], lon_result[i], emo_score[i], color=colors[1], marker=markers[1], label=labels[1])
        if category[i] == '3':
            plot2=ax.scatter(lat_result[i], lon_result[i], emo_score[i], color=colors[2], marker=markers[2], label=labels[2])
        if category[i] == '4':
            plot3=ax.scatter(lat_result[i], lon_result[i], emo_score[i], color=colors[3], marker=markers[3], label=labels[3])
        if category[i] == '5':
            plot4=ax.scatter(lat_result[i], lon_result[i], emo_score[i], color=colors[4], marker=markers[4], label=labels[4])
        if category[i] == '6':
            plot5=ax.scatter(lat_result[i], lon_result[i], emo_score[i], color=colors[5], marker=markers[5], label=labels[5])
    # ax.scatter(lat_result,lon_result,emo_score,color=colors,marker=markers,label=labels)
    ax.set_zlabel('emo')
    ax.set_ylabel('lon')
    ax.set_xlabel('lat')
    plt.legend((plot0, plot1, plot2, plot3, plot4, plot5),('food', 'life', 'school', 'outdoor', 'entertainment', 'travel'))
    plt.show()


def getEmoScore(emo_score):
    emo_average_score = 0
    for i in range(len(emo_score)):
        for key in emo_score[i]:
            emo_average_score += float(key)
        emo_average_score /= len(emo_score[i])
        print "%d emo_average_score" % i, " ", emo_average_score
        emo_average_score = 0

if __name__=='__main__':
    lat=[]
    lon=[]
    time=[]
    category=[]
    emo=[]
    getData(lat,lon,time,emo,category)
    food=life=school=outdoor=entertainment=travel=0
    normal_lat,normal_lon,normal_time=normalization(lat,lon,time)
    labels=useKmeans(normal_lat,normal_lon,normal_time,emo,k=8)
    lat_result,lon_result,time_result,emo_score,category_result=groupList(labels,lat,lon,time,emo,category,k=8)
    colors=['b', 'g', 'r','c','m','y','k','pink','grey','greenyellow']
    markers=['o', 's', 'D','v', '^','+','*','|','_','8']
    # labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']
    labels=['food','life','school','outdoor','entertainment','travel']
    getEmoScore(emo_score)
    for i in range(8):
        # drawPic1(lat_result[i],lon_result[i],time_result[i],emo_score[i],category[i],colors[i],markers[i],labels[i])
        drawPic1(lat_result[i], lon_result[i], time_result[i], emo_score[i], category_result[i], colors, markers,labels)
